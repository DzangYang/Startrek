// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Users.Infrastructure.Database;

#nullable disable

namespace Users.Infrastructure.Migrations
{
    [DbContext(typeof(AppUserDbContext))]
    partial class AppUserDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Users")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Users.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Permission", "Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "AccessMember"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ReadMember"
                        },
                        new
                        {
                            Id = 3,
                            Name = "DeletionMember"
                        },
                        new
                        {
                            Id = 4,
                            Name = "TaskMember"
                        },
                        new
                        {
                            Id = 5,
                            Name = "UpdateMember"
                        },
                        new
                        {
                            Id = 501,
                            Name = "Admin_ReadMember"
                        },
                        new
                        {
                            Id = 502,
                            Name = "Admin_TaskMember"
                        },
                        new
                        {
                            Id = 503,
                            Name = "Admin_UpdateMember"
                        },
                        new
                        {
                            Id = 504,
                            Name = "Admin_DeletionMember"
                        },
                        new
                        {
                            Id = 610,
                            Name = "HR_AddCandidates"
                        },
                        new
                        {
                            Id = 611,
                            Name = "HR_GetAllCandidates"
                        },
                        new
                        {
                            Id = 612,
                            Name = "HR_GetByIdCandidate"
                        },
                        new
                        {
                            Id = 613,
                            Name = "HR_GetByFilterCandidate"
                        },
                        new
                        {
                            Id = 614,
                            Name = "HR_RemoveCandidate"
                        },
                        new
                        {
                            Id = 615,
                            Name = "HR_UpdateCandidate"
                        },
                        new
                        {
                            Id = 620,
                            Name = "HR_AddInterview"
                        },
                        new
                        {
                            Id = 621,
                            Name = "HR_RelocateInterview"
                        },
                        new
                        {
                            Id = 622,
                            Name = "HR_CancellInterview"
                        },
                        new
                        {
                            Id = 623,
                            Name = "HR_ConductInterview"
                        },
                        new
                        {
                            Id = 624,
                            Name = "HR_GetAllInterviews"
                        },
                        new
                        {
                            Id = 625,
                            Name = "HR_GetByIdInterview"
                        },
                        new
                        {
                            Id = 630,
                            Name = "HR_AddOffer"
                        },
                        new
                        {
                            Id = 631,
                            Name = "HR_IssuanceOffer"
                        },
                        new
                        {
                            Id = 632,
                            Name = "HR_RevokeOffer"
                        },
                        new
                        {
                            Id = 633,
                            Name = "HR_ApplyOffer"
                        },
                        new
                        {
                            Id = 634,
                            Name = "HR_GetAllOffers"
                        },
                        new
                        {
                            Id = 635,
                            Name = "HR_GetByIdOffer"
                        },
                        new
                        {
                            Id = 640,
                            Name = "HR_AddVacancy"
                        },
                        new
                        {
                            Id = 641,
                            Name = "HR_UpdateVacancy"
                        },
                        new
                        {
                            Id = 642,
                            Name = "HR_BindVacancy"
                        },
                        new
                        {
                            Id = 643,
                            Name = "HR_GetByIdVacancy"
                        },
                        new
                        {
                            Id = 644,
                            Name = "HR_GetAllVacancies"
                        },
                        new
                        {
                            Id = 645,
                            Name = "HR_RemoveVacancy"
                        });
                });

            modelBuilder.Entity("Users.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Role", "Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admininstrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "HR_Officer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 4,
                            Name = "HR_Manager"
                        });
                });

            modelBuilder.Entity("Users.Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("RolePermission", "Users");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 610
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 620
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 630
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 640
                        });
                });

            modelBuilder.Entity("Users.Domain.Entities.RoleUser", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("MemberId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleUser", "Users");
                });

            modelBuilder.Entity("Users.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", "Users");
                });

            modelBuilder.Entity("Users.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("Users.Domain.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Users.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Users.Domain.Entities.RoleUser", b =>
                {
                    b.HasOne("Users.Domain.Entities.User", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Users.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
